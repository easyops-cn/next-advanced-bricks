import _ from "lodash";
import moment from "moment";
import { pipes as PIPES } from "@easyops-cn/brick-next-pipes";
import { ContextConf, CustomTemplateProxy } from "@next-core/types";

export {
  _,
  comment,
  PIPES,
};

export const BASE_URL: string;
export const IMG: readonly {
  readonly get(name: string): string;
};
export const I18N: (key: string, defaultValue?: string) => string;
export const I18N_TEXT: (data: Record<string, string> | null | undefined) => string | undefined;
export const PERMISSIONS: readonly {
  readonly check(...actions: string[]): boolean;
};
export const THEME: readonly {
  readonly getTheme(): string;
};

export const ANCHOR: string | null;
export const APP: readonly {
  readonly id: string;
  readonly homepage: string;
  readonly name: string;
  readonly localeName: string;
  readonly config: Record<string, readonly any>;
  readonly getMenu(menuId: string): any;
};
export const CTX: Record<string, readonly  any>;
export const DATA: any;
export const EVENT: CustomEvent;
export const FLAGS: Record<string, readonly boolean>;
export const HASH: string;
export const INSTALLED_APPS: readonly {
  readonly has(appId: string, matchVersion?: string): boolean;
};
export const ITEM: any;
export const LOCAL_STORAGE: readonly {
  readonly getItem(name: string): any;
};
export const MEDIA: readonly {
  readonly breakpoint: "xLarge" | "large" | "medium" | "small" | "xSmall";
};
export const MISC: Record<string, readonly any>;
export const PARAMS: URLSearchParams;
export const PATH: Record<string, readonly string>;
export const PATH_NAME: string;
export const STATE: Record<string, readonly any>;
export const PROCESSORS: Record<string, readonly Record<string, readonly Function>>;
export const QUERY: Record<string, readonly string | null>;
export const QUERY_ARRAY: Record<string, readonly string[]>;
export const SESSION_STORAGE: readonly {
  readonly getItem(name: string): any;
};
export const SYS: Record<string, readonly any>;

export function bind<T>(value: T): T;
export function recursive<T>(value: T): T;
